CREATE TABLE IF NOT EXISTS Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT OR REPLACE INTO Customers (customer_id, customer_name, email, phone) VALUES
(1, 'John Doe', 'john@example.com', '123-456-7890'),
(2, 'Alice Smith', 'alice@example.com', '234-567-8901'),
(3, 'Bob Johnson', 'bob@example.com', '345-678-9012'),
(4, 'Emma Brown', 'emma@example.com', '456-789-0123'),
(5, 'David Wilson', 'david@example.com', '567-890-1234');


CREATE TABLE IF NOT EXISTS Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

INSERT INTO Orders (order_id, customer_id, order_date, total_price) VALUES
(1, 1, '2025-02-14', 1220.98),
(2, 2, '2025-02-13', 34.98),
(3, 3, '2025-02-12', 99.99),
(4, 4, '2025-02-11', 49.98),
(5, 5, '2025-02-10', 1200.99);

CREATE TABLE IF NOT EXISTS Categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL
);

INSERT INTO Categories (category_id, category_name) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Books'),
(4, 'Home Appliances'),
(5, 'Toys');


CREATE TABLE IF NOT EXISTS Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category_id INT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE SET NULL
);

INSERT INTO Products (product_id, product_name, category_id, price, stock_quantity) VALUES
(1, 'Laptop', 1, 1200.99, 10),
(2, 'T-Shirt', 2, 19.99, 50),
(3, 'Fiction Book', 3, 14.99, 30),
(4, 'Microwave Oven', 4, 99.99, 15),
(5, 'Action Figure', 5, 24.99, 20);

CREATE TABLE IF NOT EXISTS OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE
);

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1, 1200.99),
(2, 1, 5, 1, 24.99),
(3, 2, 2, 2, 19.99),
(4, 3, 4, 1, 99.99),
(5, 4, 5, 2, 24.99);

--2,1
--SELECT SUM(total_price) FROM Orders;

--2.2
--SELECT customer_id, COUNT(order_id) FROM Orders 
--GROUP BY customer_id;

--2.3
--SELECT AVG(price) AS avg_price FROM Products;
--SELECT MAX(price) AS max_price FROM Products;
--SELECT MIN(price) AS min_price FROM Products;

--2.4
--SELECT p.category_id, SUM(od.quantity) AS total_sold FROM OrderDetails od
--JOIN Products p ON od.product_id = p.product_id
--GROUP BY p.category_id;

--2.5
--SELECT p.category_id, SUM(od.quantity) AS total_sold
--FROM OrderDetails od
--JOIN Products p ON od.product_id = p.product_id
--GROUP BY p.category_id
--HAVING SUM(od.quantity) > 1;

--3.1
--SELECT order_id, total_price FROM Orders
--WHERE total_price > (SELECT AVG(total_price) FROM Orders);

--3.2
--SELECT customer_id, customer_name
--FROM Customers
--WHERE customer_id IN (SELECT customer_id FROM Orders);

--3.3
--SELECT product_id, product_name
--FROM Products
--WHERE product_id NOT IN (SELECT product_id FROM OrderDetails);

--3.4
SELECT product_id, product_name, category_id, price
FROM Products p1
WHERE price = (
    SELECT MAX(price) 
    FROM Products p2 
    WHERE p1.category_id = p2.category_id
);


